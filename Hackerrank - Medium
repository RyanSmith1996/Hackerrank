--- Contest Leaderboard - Hackerrank -- Medium Level
Requirement: 
The total score of a hacker is the sum of their maximum scores for all of the challenges. 
Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. 
If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. 
Exclude all hackers with a total score of 0  from your result.

Answer:
Select M.Hacker_ID, H.Name, SUM(Score) as TotalScore From
(Select Hacker_ID, Challenge_ID, MAX(Score) as score
From Submissions
Group by Hacker_ID, Challenge_ID) as M
JOIN Hackers H
ON M.Hacker_ID = H.Hacker_ID
Group by M.Hacker_ID, H.Name
HAVING TotalScore <> 0
Order by TotalScore DESC, M.Hacker_ID

----- Top Competitors --- Hackerrank --- Medium Level
Requirement: Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! 
Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. 
Order your output in descending order by the total number of challenges in which the hacker earned a full score. 
If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

Where Version
Answer:  
Select H.Hacker_Id, H.Name
From Hackers H, Difficulty D, Challenges C, Submissions S
Where H.Hacker_ID = S.Hacker_ID
AND D.Difficulty_Level = C.Difficulty_Level
AND C.Challenge_ID = S.Challenge_ID
AND S.Score = D.Score
Group by H.Hacker_ID, H.Name 
HAVING COUNT(H.Hacker_ID)> 1
Order by count(s.score) desc, H.Hacker_ID

JOIN Version
select h.hacker_id ,h.name from Submissions as s

inner join Challenges as c on s.challenge_id=c.challenge_id
inner join Difficulty as d on c.difficulty_level=d.difficulty_level
inner join Hackers as h on h.hacker_id=s.hacker_id

where s.score=d.score

group by h.hacker_id,h.name

having count(s.hacker_id)>1

order by count(s.score) desc ,s.hacker_id  



----- The Report --- Hackerrank --- Medium Level - MySQL
Requirement:
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. 
Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.
SELECT IF(GRADE<8,'NULL',S.NAME), G.Grade, S.Marks
From Students S
JOIN Grades G
ON S.Marks <=MAX_MARK AND S.Marks >=MIN_MARK
ORDER BY G.Grade DESC, S.NAME ASC


JOIN Version
select h.hacker_id ,h.name from Submissions as s

inner join Challenges as c on s.challenge_id=c.challenge_id
inner join Difficulty as d on c.difficulty_level=d.difficulty_level
inner join Hackers as h on h.hacker_id=s.hacker_id

where s.score=d.score

group by h.hacker_id,h.name

having count(s.hacker_id)>1

order by count(s.score) desc ,s.hacker_id  
